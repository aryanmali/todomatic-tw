{"ast":null,"code":"var _jsxFileName = \"C:\\\\personal\\\\work\\\\react\\\\todomatic\\\\moz-todo-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["C:/personal/work/react/todomatic/moz-todo-react/src/App.js"],"names":["React","Form","FilterButton","Todo","useState","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","toggleTaskCompleted","id","updatedTasks","map","deleteTask","remainingTasks","editTask","newName","editedTaskList","name","taskList","filterList","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  \n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  \n  \n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  \n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  \n  \n  \n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form />\n      <div className=\"filters btn-group stack-exception\">\n      {filterList}\n\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}